# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pavlov_central.api.models.base_model_ import Model
from pavlov_central.api import util


class Player(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, nickname=None, power=None):  # noqa: E501
        """Player - a model defined in OpenAPI

        :param email: The email of this Player.  # noqa: E501
        :type email: str
        :param nickname: The nickname of this Player.  # noqa: E501
        :type nickname: str
        :param power: The power of this Player.  # noqa: E501
        :type power: int
        """
        self.openapi_types = {
            'email': str,
            'nickname': str,
            'power': int
        }

        self.attribute_map = {
            'email': 'email',
            'nickname': 'nickname',
            'power': 'power'
        }

        self._email = email
        self._nickname = nickname
        self._power = power

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Player.


        :return: The email of this Player.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Player.


        :param email: The email of this Player.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def nickname(self):
        """Gets the nickname of this Player.


        :return: The nickname of this Player.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Player.


        :param nickname: The nickname of this Player.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")  # noqa: E501

        self._nickname = nickname

    @property
    def power(self):
        """Gets the power of this Player.


        :return: The power of this Player.
        :rtype: int
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this Player.


        :param power: The power of this Player.
        :type power: int
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")  # noqa: E501

        self._power = power
